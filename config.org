* Load packages
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'load-path "~/.guix-profile/share/emacs/site-lisp")
  ;; (guix-emacs-autoload-packages)
#+END_SRC
* Beautify Emacs
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (add-hook 'after-init-hook (lambda () (load-theme 'spacemacs-dark t)))
#+END_SRC
* Custom keybindgs
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-x\C-i" (lambda() (interactive)(find-file user-init-file)))
  (define-key global-map [remap find-file] 'helm-find-files)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
  (setq org-log-done t)
  (setq org-directory "~/org")
  (setq org-agenda-files (list "todo.org" "inbox.org"))
#+END_SRC
* GTD
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
	`(("i" "Inbox" entry (file "inbox.org")
	   ,(concat "* TODO %?\n"
		    "/Entered on/ %U"))))

  (define-key global-map (kbd "C-c c") 'org-capture)

  (defun org-capture-inbox ()
    (interactive)
    (call-interactively 'org-store-link)
    (org-capture nil "i"))
  
  (define-key global-map (kbd "C-c i") 'org-capture-inbox)

#+END_SRC
* Guix Hacking
Assuming the Guix checkout is in ~/src/guix.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'geiser-guile
    (add-to-list 'geiser-guile-load-path "~/src/guix"))

  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)

  (with-eval-after-load 'tempel
    ;; Ensure tempel-path is a list -- it may also be a string.
    (unless (listp 'tempel-path)
      (setq tempel-path (list tempel-path)))
    (add-to-list 'tempel-path "~/src/guix/etc/snippets/tempel/*"))

  (setq user-full-name "Hugo Thomas")
  (setq user-mail-address "hugo.thomas170@protonmail.com")
  (load-file "~/src/guix/etc/copyright.el")

  (setq copyright-names-regexp
	(format "%s <%s>" user-full-name user-mail-address))
#+END_SRC
* Corfu
#+BEGIN_SRC emacs-lisp
  (corfu-terminal-mode)
  (customize-set-variable 'corfu-cycle t)
  (customize-set-variable 'corfu-auto t)
  (customize-set-variable 'corfu-auto-delay 0.0)

  (global-corfu-mode 1)
  (corfu-popupinfo-mode 1)
#+END_SRC
* Emacs welcom buffers
** Emacs Dashboard
#+BEGIN_SRC emacs-lisp
  (dashboard-setup-startup-hook)
  ;; Set the title
  (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
  ;; Content is not centered by default. To center, set
  (setq dashboard-center-content t)
  (setq dashboard-items '((recents . 5)
			  (bookmarks . 5)))
#+END_SRC
** Org-agenda at startup
#+BEGIN_SRC emacs-lisp
  (org-agenda nil "n")
  (add-hook 'emacs-startup-hook (lambda ()
				  (when (get-buffer "*scratch*")
				    (kill-buffer "*scratch*"))))
#+END_SRC
** Buffer reorganisation
I use that to display org agenda by dahsboard side, maybe its a bit messy, cause
I didn't really split the screen anywere
#+BEGIN_SRC emacs-lisp
  (other-window 1)
  (switch-to-buffer "Org Agenda")
#+END_SRC
* Utilities
#+BEGIN_SRC emacs-lisp
  (xclip-mode 1)
#+END_SRC
